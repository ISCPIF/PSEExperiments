

@import org.openmole.site.Objects._
@import org.openmole.site.Resource

@sect{Build a headless version of a NetLogo code}
  If you want to use your program with graphical widget and with NetLogo, we need to apply some good guidelines :
  @ul
    @li{A) Limit your usage of widget implicit globals. We prefer explicit globals using the globals primitive, because you need to re-define all important values in your program with OpenMoLE before you launch it on the computer grid.}
    @li{B) Do not use the same functions setup and go to set your program on the grid. On the grid, the NetLogo program is initialized and launched only once, so it is useless to call a clear-all primitive at each setup. On the grid, clear-all is *not* your best friend since it erases all the globals given by OpenMoLE to your program before your run and makes crash your code .}
    @li{C) Do not directly use  the implicit globals created by means of a widget. It is only an advice, because you can access and overwrite them in OpenMole, but it prevents OpenMoLE from mapping explicitly its Prototypes and the NetLogo globals.}

  @p NetLogo is a graphical framework. So, many variables of a model developed in NetLogo are set by means of a widget (a graphical component). In the NetLogo World, set or get a value on the model inputs is generally achieved using the widget object and to set or get its value. In OpenMoLE, the NetLogo program has to be parametrized without its GUI. You have to use your models with OpenMole in headless mode. This is not a problem because if you don’t define new values for globals in OpenMole NetLogo Task, NetLogo takes the default values defined in widgets. But, if you have lot of parameters defined in your model, you can also forget to override values in OpenMOLE. So, when you launch your model, NetLogo takes widget values, and your model finally run thousand times with a wrong set of parameter values. We propose here a simple method which invites you to define all parameters of your models before you run your NetLogo models with OpenMOLE.

@sect{Example with the Fire model}
  @i{Fire} has a widget slider named @i{density} which is a global implicit.

  @br @img(src := Resource.fireScreen.file)

  @p In the source code we can see  the initial-trees and burned-trees variables which are explicit globals, and we can directly use them in OpenMOLE.

  @br @img(src := Resource.fireGlobals.file)

  @p We propose here a simple method to better organizing your code in order to make it manipulable by OpenMOLE:
  @ul
    @li{First we do not use the implicit globals, so we create an explicit global variable @i{myDensity} corresponding to the implicit one (@i{density}) :
      @img(src := Resource.fireNewGlobals.file)
    }
    @li{Second, we use this new variable in the setup procedure:
      @img(src := Resource.fireMyDensity.file)
    }
    @li{At this moment, your program does not work any more in NetLogo, @b{it’s normal, don’t panic}.
      @img(src := Resource.fireNewFunction.file)
    }
    @li{Fourth, we call this function in our setup function, after the clear-all primitives.
      @img(src := Resource.fireOldSetup.file)
    }
    @li{Now, the program works in NetLogo’s graphical mode, but we need to create another setup function without the call to clear-all and to  init-globals, in order to use with OpenMOLE.
      @img(src := Resource.fireRemoveClearAll.file)
    }

  @p Now the program can be parametrized and manipulated by OpenMOLE.
