@import org.openmole.site.Objects._

@def variables = """
  val replication = Val[Int]
  val similar_wanted = Val[Double]"""

@def exploration = """
  val exploration =
    ExplorationTask(
      (similar_wanted in (20.0 to 80.0 by 10.0)) x
      (replication in (UniformDistribution[Int]() take 10))
    )"""

@def netlogo = """
  val psimilar = Val[Double]
  val punhappy = Val[Double]

  val cmds = List(
    "random-seed ${replication}",
    "go-openMOLE 2000 ${similar_wanted} 30",
    "export-context")

  // FIXME why not using netLogoInputs ?
  val segregationTask = NetLogo5Task("/path/to/the/segregation.nlogo", cmds) set (
    inputs += (replication, similar_wanted),
    netLogoOutputs += ("percent-similar", psimilar),
    netLogoOutputs += ("percent-unhappy", punhappy)
  )"""

@def csvHook = """
  val csvHook = AppendToCSVFileHook("result.csv", similar_wanted, psimilar, punhappy)"""

@sect{Embed your NetLogo model}
  In this example, we present step by step how to explore a NetLogo model. Thomas Schelling's segregation model is a common NetLogo examples. It studies the evolution of two populations whom people get a mixing rate.

  @sect{The simulation}
    We would like to study the impact of the @i{%-SIMILAR-WANTED} factor for a fixed size of population. To do this, we build a design of experiment where the @i{%-SIMILAR-WANTED} factor takes its value from 20% to 80%. Since it is a stochastic model, we are interested in doing replications for each step and storing it in a @i{CSV} file. In this example, we will do 10 replications for each (even though it is a way too small sample to draw up any conclusion).

  @p You can get the NetLogo file of the model @a("here", href := "http://www.openmole.org/files/segregation.nlogo").

  @sect{The Design of Experiment}
    We need to repeat our experience 10 times for every step of the @i{%-SIMILAR-WANTED} exploration. So we first need to define 2 OpenMOLE variables:
    @ul
	  @li{an integer (Int) representing the seed of the random number generator for exploring the replications,}
	  @li{and a Double to set @i{%-SIMILAR-WANTED},}

    @br @hl.openmole(variables)

    @p We can now define a design of experiment need the range where the @i{similar_wanted} varies from 20 to 80 by step of 10 and replication takes 10 random values:

    @br @hl.openmole(exploration, header = variables)

    @p This design of experiment will generate 70 distinct sets of input values for the NetLogo model:
    @ul
      @li{10 replications with 10 different seeds for the percentage 20%}
      @li{10 replications with 10 different seeds for the percentage 30%}
      @li{...}
      @li{10 replications with 10 different seeds for the percentage 80%}

    @p Now we want to compose this design of experiment in a complete workflow in order to run 70 times the model.

  @sect{The NetLogo task}
    Let's construct the main task of the workflow: the one running the NetLogo code. So let's build a NetLogoTask by providing to OpenMOLE:
    @ul
	  @li{the path of the NetLogo model, i.e. the nlogo file,}
	  @li{the list of NetLogo commands that OpenMOLE needs to run}
	@p in this example, the commands contains:
	@ul
	  @li{@i{random-seed} that initialise the random number generator of NetLogo using the seed provided by OpenMOLE,}
	  @li{@i{go-openMOLE}, a function that run the model}
	  @li{@i{export-context} FIXME: Document}
	@p The function @i{go-openMOLE} takes three parameters:
    @ul
      @li{the number of agents in model (fixed to 2,000),}
	  @li{the initial number of similar agents,}
	  @li{the maximum number of simulation steps in the case the model does not converge.}

	@br @hl.openmole(netlogo, header =
	s"""
	$variables
	$exploration
	""")

    @p As you can see, we use the @i{replication} and the @i{similar_wanted} OpenMOLE values are parameters of NetLogo method. Therefore they are added as inputs. In this example 2 outputs of the model are considered and collected by OpenMOLE at the end of each model execution.

  @sect{Storing the results}
    In OpenMOLE, tasks executions are usually delegated to many different computers. To gather the results these task's executions it is required to use @i{hooks}. A hook is a kind of listener that saves or display results. Here we will create a hook to listen to the model executions and save the results in a CSV file at the end of each model execution:

    @br @hl.openmole(csvHook, header =
    s"""
	$variables
	$exploration
	$netlogo
	""")

  @sect{Bringing the pieces altogether}
    Now that we have defined each components we can define the workflow that bring the pieces together:
    @br @hl.openmole("""val ex = exploration -< (segregationTask hook csvHook) start""", header = s"""
    $variables
	$exploration
	$netlogo
	$csvHook
    """)

    @p To see the progress of the simulation, print the state of the execution variable: @hl.openmole("""print(ex)""", test = false)
    @p At the end of the execution you will find the a file called @i{result.csv}, which compiles the output values.
