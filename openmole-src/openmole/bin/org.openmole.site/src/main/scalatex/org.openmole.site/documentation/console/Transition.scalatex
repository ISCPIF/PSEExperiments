
@import org.openmole.site.Objects._

@sect{Transition}
  In OpenMOLE, transitions link task with each-other. The following examples illustrate several kind of transitions available in OpenMOLE.
  @sect{Capsules and slots}
    Even if it has been made transparent most of the time tasks are not directly linked to each-other by transitions. They are encapsulated in a so called @i{Capsule}. Each capsule has one or several input @i{Slots} in which transitions are plugged. To encapsulate a task explicitly you should write:
    @br @hl.openmole("""
    val t1 = ScalaTask("1 + 1")
    val c1 = Capsule(t1)
    """)
    @p Capsules are the atomic element in the workflow on which transitions are plugged and on which hooks, sources and execution environments are specified. When you link a task directly without specifying a capsule explicitly a new capsule is created. It means that if you want several transitions to reach the same task you should create the capsule explicitly.
    @p Capsules might own several input slots in which transition are plugged. Slots made it possible to specify iterative workflows (with cycles) as well as synchronisation points between several parts of a workflow. The rule is that the task encapsulated in the capsule is executed each time all the transitions reaching a given input slot have been crossed. To specify slots explicitly you should write:
    @br @hl.openmole("""
    val t1 = ScalaTask("1 + 1")
    val c1 = Capsule(t1)
    val s1 = Slot(c1)
    """)
  @sect{A simple transition}
    A transition specify a precedence relationship between 2 task. In the following example, the task @i{t1} produces a variable @i{i} which travels along a transition to the task @i{t2} which uses it in order to compute it's output:
    @br @hl.openmole("""
    val d = Val[Double]
    val e = Val[Double]

    val t1 = ScalaTask("val d = 42.0") set ( outputs += d )
    val t2 = ScalaTask("val e = d / 42") set ( inputs += d, outputs += e)

    val ex = t1 -- (t2 hook ToStringHook()) start""")
  @sect{The exploration transition}
    The exploration transition link an exploration task to another task. It creates one new execution stream by sample point in the design of experiment of the exploration task.For instance this workflow run 10 times the task t1:
    @br @hl.openmole("""
    // Declare the variable
    val d = Val[Double]

    // Define the Hello task
    val t1 = ScalaTask("d = d * 2") set ( inputs += d, outputs += d )

    //Define the exploration strategy
    val exploration = ExplorationTask( d in (0.0 to 99.0 by 10.0) )

    val ex = exploration -< (t1 hook ToStringHook()) start""")
  @sect{Combining the transitions}
    In order to automate some process we might want to run several task in sequence after an exploration transition. To achieve that you can easily compose the 2 previous transitions:
    @br @hl.openmole("""
    val d = Val[Double]

    val t1 = ScalaTask("d = d * 42") set ( inputs += d, outputs += d )
    val t2 = ScalaTask("d = d + 100") set ( inputs += d, outputs += d)
    val exploration = ExplorationTask( d in (0.0 to 99.0 by 10.0) )

    val ex = exploration -< t1 -- (t2 hook ToStringHook()) start""")
  @sect{Conditions}
    When needed, it is possible to set a condition on the transition so that the task after the transition is executed under this condition only. For instance we can add a condition on the execution of @i{t2} in the previous workflow:
    @br @hl.openmole("""
    val d = Val[Double]

    val t1 = ScalaTask("d = d * 42") set ( inputs += d, outputs += d )
    val t2 = ScalaTask("d = d + 100") set ( inputs += d, outputs += d)
    val exploration = ExplorationTask( d in (0.0 to 99.0 by 10.0) )

    val ex = exploration -< t1 -- (t2 hook ToStringHook(), "d < 1000") start""")
    @p In this case the task @i{t2} is executed only if the variables "d" is greater than 1000.
  @sect{Tasks in parallel}
    In OpenMOLE you can also define task as being independent from each other so they can be executed concurrently. For instance, in this example @i{t2} and @i{t3} are executed concurrently:
    @br @hl.openmole("""
    val d = Val[Double]

    val t1 = ScalaTask("d = d * 42") set ( inputs += d, outputs += d )
    val t2 = ScalaTask("d = d + 100") set ( inputs += d, outputs += d)
    val t3 = ScalaTask("d = d - 100") set ( inputs += d, outputs += d)
    val exploration = ExplorationTask( d in (0.0 to 99.0 by 10.0) )

    val ex = exploration -< t1 -- (t2 hook ToStringHook(), (t3 hook ToStringHook())) start""")

  @sect{Aggregating results from an exploration}
    We have seen how we can execute tasks for a set of values with the exploration transition @i{-<}. It is also possible to collect all the results produced by an exploration in order to compute global indicators. For instance in the following workflow we sum over all the results computed by t1 in the exploration:
    @br @hl.openmole("""
    // Declare the variable
    val d = Val[Double]

    val t1 = ScalaTask("d = d * 2") set ( inputs += d, outputs += d )
    val exploration = ExplorationTask( d in (0.0 to 99.0 by 10.0) )
    val aggregate = ScalaTask("val d = input.d.sum") set ( inputs += d.toArray, outputs += d )

    val ex = exploration -< t1 >- (aggregate hook ToStringHook()) start""")
    @p The aggregation is performed using the aggregation transition noted @i{>-}.
  @sect{Loop}
    The OpenMOLE workflow formalism is very flexible. You can seamlessly create loops in the workflow and it will work. However to achieve that, you have to use an artifact that has been hidden to you until now: the @i{slot}. Slots are useful to distinguish synchronization points from loops. A task may possess multiple input slots and the execution of a task is triggered when all the incoming transitions belonging to the same input slot have been passed through. In the following workflow we use several slots to define a loop in the workflow:
    @br @hl.openmole("""
    val i = Val[Int]
    val t0 = ScalaTask("val i = 0") set ( outputs += i )
    val t1 = ScalaTask("i = i + 1") set ( inputs += i, outputs += i )
    val c1 = Capsule(t1)
    val s1 = Slot(c1)
    val s2 = Slot(c1)

    val ex = (
        t0 -- s1 -- (s2, "i < 100") +
        (c1 hook ToStringHook())
      ) start""")
