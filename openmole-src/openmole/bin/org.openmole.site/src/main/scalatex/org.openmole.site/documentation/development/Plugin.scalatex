
@import org.openmole.site.Objects._

@sect{Plugin development}
  OpenMOLE is an pluggable platform, meaning that you can easily write your own code (or OpenMOLE extension) and plug it into the plateform. This tutorial explains how to write an OpenMOLE plugin using Scala and SBT. OpenMOLE is based on the JVM so you can successfully create OpenMOLE plugins using other JVM based languages such as Java, Groovy, Clojure, Jython...

  @p The prerequisite for the tutorial is to have @a("git", href := "http://git-scm.com/") and @a("SBT", href := "http://www.scala-sbt.org/") installed on your system.

  @p To start this tutorial, clone the code available @a("here", href := "https://github.com/openmole/myopenmoleplugin"):
  @br @hl.highlight("git clone git://github.com/openmole/myopenmoleplugin.git", "plain")
  @p This repository contains all you need to create an OpenMOLE plugin. The @i{src/main/scala/myopemoleplugin} directory contains the source code of the plugin:
  @br @hl.highlight("""
  package myopenmoleplugin

  object Hello {
    def world(i: Int) = i * 2
  }""", "scala")

  @p The file @i{build.sbt} contains the building instructions for SBT. The most important part are the OSGi instructions:
  @br @hl.highlight("""
  OsgiKeys.exportPackage := Seq("myopenmoleplugin.*")

  OsgiKeys.importPackage := Seq("*;resolution:=optional")

  OsgiKeys.privatePackage := Seq("!scala.*,*")""", "plain")

  @p The @i{exportPackage} instruction make the @i{myopenmole} package visible to OpenMOLE. The @i{importPackage} instruction means that every package that is not included into the plugin should be imported. The @i{privatePackage} means that every package in the project or in the dependencies should be embedded except for the package starting by the scala word, instead the scala packages provided by OpenMOLE platform will be used by the plugin.

  @p To build the plugin execute: @hl.highlight("sbt osgi-bundle", "plain")
  @p The plugin is constructed in target/scala-2.11/myopenmoleplugin_2.11-1.0.jar. As you can observe it contains the classes you have developed *.class and the metadata about import and export in the MANIFEST.INF:
  @br @hl.highlight("""
  META-INF/MANIFEST.MF
  myopenmoleplugin/
  myopenmoleplugin/Hello$.class
  myopenmoleplugin/Hello.class""", "plain")

  @p To use this plugin in OpenMOLE you should launch OpenMOLE with the option -p:
  @br @hl.highlight("""openmole -p target/scala-2.11/myopenmoleplugin_2.11-1.0.jar -c""", "plain")
  @p You can now use the Hello object in the scripts for instance:
  @br @hl.openmole("""
  import org.openmole.plugin.domain.collection._
  import org.openmole.plugin.domain.distribution._
  import org.openmole.plugin.domain.modifier._
  import org.openmole.plugin.sampling.combine._
  import org.openmole.plugin.task.scala._
  import org.openmole.plugin.hook.display._

  // Declare the variable
  val i = Val[Int]

  // Hello task
  val hello = ScalaTask("i = Hello.world(i)") set (
    imports += "myopenmoleplugin._",
    inputs += i,
    outputs += i,
    usedClasses += classOf[myopenmoleplugin.Hello]
  )

  val exploration = ExplorationTask(i in (0 to 2))

  val ex = exploration -< (hello hook ToStringHook()) start""", header = "object myopenmoleplugin { class Hello }")
